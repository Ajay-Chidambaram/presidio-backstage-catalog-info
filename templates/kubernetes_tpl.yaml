apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: kubernetes
  title: Kubernetes
  description: A FinOps Demo template for deploying resources in Kubernetes
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Onboarding Kubernetes Blueprints
      required:
        - name
        - description
        - directory
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Description
          type: string
          description: Description of the component
          ui:autofocus: false
          ui:options:
            rows: 5
        directory:
          title: Directory
          type: string
          description: Location of your Kubernetes manifests
          ui:autofocus: false
          ui:options:
            rows: 5
        policies:
          title: Select required Policies
          type: array
          items:
            type: string
            enum:
              - 'Billing Policies'
          uniqueItems: true
          ui:widget: checkboxes

      dependencies:
        policies:
          allOf:
            # For Billing labels
            - if:
                properties:
                  policies:
                    contains:
                      enum: ['Billing Policies']
              then:
                properties:
                  allowed_billing_labels:
                    title: Required Billing Labels
                    type: array
                    description: Specifiy required Billing Labels for your resources
                    minItems: 0
                    ui:options:
                      rows: 5
                      addable: true
                      orderable: true
                      removable: true
                    items:
                      type: string
                required:
                  - allowed_billing_labels

    - title: SCM Location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: https://github.com/Kavinraja-G/backstage-templates/tree/main/kubernetes
        copyWithoutTemplating:
          - .github/**/*.yaml
          - .github/**/*.yml
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        repoVariables:
          k8s_directory: ${{ parameters.directory }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
