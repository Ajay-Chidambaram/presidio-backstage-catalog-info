apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: terraform
  title: Terraform - Azure
  description: A FinOps Demo template for deploying Azure infrastructure using Terraform
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
  - title: Onboarding Terraform Blueprints
    required:
    - name
    - description
    - budget
    properties:
      name:
        title: Name
        type: string
        description: Unique name of the component
        ui:autofocus: true
        ui:options:
          rows: 5
      description:
        title: Description
        type: string
        description: Description of the component
        ui:autofocus: false
        ui:options:
          rows: 5
      budget:
        title: Budget
        type: number
        description: Allocated budget for your infrastructure
        ui:autofocus: false
        ui:options:
          rows: 5
      policies:
        title: Select required Policies
        type: array
        items:
          type: string
          enum:
          - 'EC2 Policies'
          - 'Tagging Policies'
        uniqueItems: true
        ui:widget: checkboxes

    dependencies:
      policies:
        allOf:
        # For EC2 policies
        - if:
            properties:
              policies:
                contains:
                  enum: ['EC2 Policies']
          then:
            properties:
              restricted_ec2_instance_types:
                title: Restricted Instance types
                type: string
                default: xlarge
                description: Specifiy restricted EC2 instance types for your resources in regex format
            required:
            - restricted_ec2_instance_types

        # For Tagging policies
        - if:
            properties:
              policies:
                contains:
                  enum: ['Tagging Policies']
          then:
            properties:
              allowed_billing_tags:
                title: Required Billing Tags
                type: array
                description: Specifiy required Billing tags for your resources
                minItems: 0
                ui:options:
                  rows: 5
                  addable: true
                  orderable: true
                  removable: true
                items:
                  type: string
            required:
            - allowed_billing_tags

  - title: SCM Location
    required:
    - repoUrl
    properties:
      repoUrl:
        title: Repository Location
        type: string
        ui:field: RepoUrlPicker
        ui:options:
          allowedHosts:
          - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
  # Each step executes an action, in this case one templates files into the working directory.
  - id: fetch-base
    name: Fetch Base
    action: fetch:template
    input:
      url: https://github.com/Kavinraja-G/backstage-templates/tree/main/terraform
      copyWithoutTemplating:
      - .github/**/*.yaml
      - .github/**/*.yml
      values:
        name: ${{ parameters.name }}
        description: ${{ parameters.description }}
        destination: ${{ parameters.repoUrl | parseRepoUrl }}

  # This step publishes the contents of the working directory to GitHub.
  - id: publish
    name: Publish
    action: publish:github
    input:
      allowedHosts: ['github.com']
      description: ${{ parameters.description }}
      repoUrl: ${{ parameters.repoUrl }}
      defaultBranch: main
      repoVariables:
        tf_infra_budget: ${{ parameters.budget | dump }}
        ec2_enabled: ${{ ('EC2 Policies' in parameters.policies) | string }}
        restricted_ec2_instance_types: ${{ parameters.restricted_ec2_instance_types | dump }}
        tags_enabled: ${{ ('Tagging Policies' in  parameters.policies) | string }}
        allowed_billing_tags: ${{ parameters.allowed_billing_tags | dump }}

  # The final step is to register our new component in the catalog.
  - id: register
    name: Register
    action: catalog:register
    input:
      repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
      catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
    - title: Repository
      url: ${{ steps['publish'].output.remoteUrl }}
    - title: Open in catalog
      icon: catalog
      entityRef: ${{ steps['register'].output.entityRef }}
